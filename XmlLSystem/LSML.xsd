<?xml version="1.0" ?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	elementFormDefault="qualified"
	targetNamespace="LSystem"
	xmlns:ls="LSystem">

<xs:element name="lsml">
	<xs:complexType>
		<xs:sequence>
			<xs:element name="variables" type="ls:variablesType" minOccurs="0"/>

			<xs:element name="declaration" type="ls:declarationType"/>

			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element name="l_rule" type="ls:ruleWithLeftContextType"/>
				<xs:element name="r_rule" type="ls:ruleWithRightContextType"/>
				<xs:element name="lr_rule" type="ls:ruleWithBothContextType"/>
				<xs:element name="rule" type="ls:ruleType"/>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<!-- module validation -->
	<xs:key name="moduleKey">
		<xs:selector xpath="ls:declaration/ls:modules/ls:module"/>
		<xs:field xpath="@id"/>
	</xs:key>
	<xs:keyref name="sourceModuleRef" refer="ls:moduleKey">
		<xs:selector xpath="ls:rule|ls:l_rule|ls:r_rule"/>
		<xs:field xpath="@source"/>
	</xs:keyref>
	<xs:keyref name="leftContextModuleRef" refer="ls:moduleKey">
		<xs:selector xpath="ls:l_rule|ls:lr_rule"/>
		<xs:field xpath="@left_context"/>
	</xs:keyref>
	<xs:keyref name="rightContextModuleRef" refer="ls:moduleKey">
		<xs:selector xpath="ls:r_rule|ls:lr_rule"/>
		<xs:field xpath="@right_context"/>
	</xs:keyref>
	<xs:keyref name="axiomeModuleRef" refer="ls:moduleKey">
		<xs:selector xpath="ls:declaration/ls:axiome/ls:module"/>
		<xs:field xpath="@id"/>
	</xs:keyref>
	<xs:keyref name="branchBeginRef" refer="ls:moduleKey">
		<xs:selector xpath="ls:declaration/ls:contextOptions/ls:branches/ls:begin"/>
		<xs:field xpath="@id"/>
	</xs:keyref>
	<xs:keyref name="branchEndRef" refer="ls:moduleKey">
		<xs:selector xpath="ls:declaration/ls:contextOptions/ls:branches/ls:end"/>
		<xs:field xpath="@id"/>
	</xs:keyref>
	<xs:keyref name="moduleBaseRef" refer="ls:moduleKey">
		<xs:selector xpath="ls:declaration/ls:modules/ls:module"/>
		<xs:field xpath="@base"/>
	</xs:keyref>
	<xs:keyref name="ignoreModuleRef" refer="ls:moduleKey">
		<xs:selector xpath="ls:declaration/ls:contextOptions/ls:ignore/ls:module"/>
		<xs:field xpath="@id"/>
	</xs:keyref>
	<!-- parameter validation -->
	<xs:key name="paramKey">
		<xs:selector xpath="ls:declaration/ls:parameters/ls:parameter"/>
		<xs:field xpath="@param_id"/>
	</xs:key>
	<xs:keyref name="moduleParamRef" refer="ls:paramKey">
		<xs:selector xpath="ls:declaration/ls:modules/ls:module/ls:parameter"/>
		<xs:field xpath="@param_id"/>
	</xs:keyref>
	<xs:keyref name="ruleParamRef" refer="ls:paramKey">
		<xs:selector xpath="ls:rule/ls:successor/ls:parameterUpdate"/>
		<xs:field xpath="@param_id"/>
	</xs:keyref>

	<!-- uniqueness enshurance -->

	<xs:unique name="moduleIgnoreUniquness">
		<xs:selector xpath="ls:declaration/ls:contextOptions/ls:ignore/ls:module"/>
		<xs:field xpath="@id"/>
	</xs:unique>

	<!-- <xs:unique name="moduleParameterUniquness">
		<xs:selector xpath="ls:declaration/ls:modules/ls:module"/>
		<xs:field xpath="ls:parameter/@param_id"/>
		<xs:field xpath="@id"/>
	</xs:unique> -->

</xs:element>

<xs:complexType name="code_usage">
	<xs:sequence>
		<xs:element name="macros" maxOccurs="unbounded" minOccurs="0">
			<xs:complexType>
				<xs:simpleContent>
					<xs:extension base="xs:string">
						<xs:attribute name="name" use="required"/>
					</xs:extension>
				</xs:simpleContent>
			</xs:complexType>
		</xs:element>
	</xs:sequence>
</xs:complexType>

<xs:complexType name="variablesType">
	<xs:sequence>
		<xs:element name="variable" maxOccurs="unbounded">
			<xs:complexType>
				<xs:attribute name="type" type="xs:string" use="required"/>
				<xs:attribute name="name" type="xs:string" use="required"/>
			</xs:complexType>
		</xs:element>
	</xs:sequence>
</xs:complexType>


<xs:complexType name="declarationType">
	<xs:sequence>
		<xs:element name="parameters" type="ls:parametersDefinition"/>
		<xs:element name="modules" type="ls:modulesDeclaration"/>
		<xs:element name="axiome" type="ls:modulesList"/>
		<xs:element name="contextOptions" type="ls:contextType" minOccurs="0"/>
	</xs:sequence>
</xs:complexType>

<xs:complexType name="contextType">
	<xs:choice>
		<xs:sequence>
			<xs:element name="ignore" type="ls:modulesList"/>
			<xs:element name="branches" minOccurs="0" type="ls:branchType"/>
		</xs:sequence>
		<xs:sequence >
			<xs:element name="branches" type="ls:branchType"/>
	    	<xs:element name="ignore" minOccurs="0" type="ls:modulesList"/>
	  	</xs:sequence>
	</xs:choice>
</xs:complexType>

<xs:complexType name="branchType">
	<xs:sequence>
		<xs:element name="begin" type="ls:moduleName"/>
		<xs:element name="end" type="ls:moduleName"/>
	</xs:sequence>
</xs:complexType>

<xs:complexType name="parametersDefinition">
	<xs:complexContent>
		<xs:extension base="ls:code_usage">
			<xs:sequence>
				<xs:element name="parameter" type="ls:paramDefType" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:extension>
	</xs:complexContent>
</xs:complexType>

<xs:complexType name="modulesDeclaration">
	<xs:sequence>
		<xs:element name="module" type="ls:moduleDefType" maxOccurs="unbounded"/>
	</xs:sequence>
</xs:complexType>

<xs:complexType name="modulesList">
	<xs:sequence>
		<xs:element name="module" type="ls:moduleName" maxOccurs="unbounded"/>
	</xs:sequence>
</xs:complexType>


<xs:complexType name="ruleType">
	<xs:complexContent>
		<xs:extension base="ls:code_usage">
			<xs:sequence>
				<xs:element name="condition" minOccurs="0" type="xs:string"/>
				<xs:element name="successor" maxOccurs="unbounded" minOccurs="0" type="ls:moduleUseType"/>
			</xs:sequence>
			<xs:attribute name="source" type="xs:string" use="required"/>
			<xs:attribute name="weight" type="xs:decimal" default="1"/>
			<xs:attribute name="priority" type="xs:int" default="0"/>
		</xs:extension>
	</xs:complexContent>
</xs:complexType>

<xs:complexType name="ruleWithRightContextType">
	<xs:complexContent>
		<xs:extension base="ls:ruleType">
			<xs:attribute name="right_context" type="xs:string" use="required" />
		</xs:extension>
	</xs:complexContent>
</xs:complexType>

<xs:complexType name="ruleWithLeftContextType">
	<xs:complexContent>
		<xs:extension base="ls:ruleType">
			<xs:attribute name="left_context" type="xs:string" use="required"/>
		</xs:extension>
	</xs:complexContent>
</xs:complexType>

<xs:complexType name="ruleWithBothContextType">
	<xs:complexContent>
		<xs:extension base="ls:ruleType">
			<xs:attribute name="left_context" type="xs:string" use="required"/>
			<xs:attribute name="right_context" type="xs:string" use="required" />
		</xs:extension>
	</xs:complexContent>
</xs:complexType>

<xs:complexType name="moduleName">
	<xs:attribute name="id" type="xs:string" use="required"/>
</xs:complexType>

<xs:complexType name="moduleDefType">
	<xs:complexContent>
		<xs:extension base="ls:moduleName">
			<xs:sequence>
				<xs:element name="parameter" maxOccurs="unbounded" minOccurs="0" type="ls:paramName"/>
			</xs:sequence>
			<xs:attribute name="base" type="xs:string"/>
		</xs:extension>
	</xs:complexContent>
</xs:complexType>

<xs:complexType name="moduleUseType">
	<xs:complexContent>
		<xs:extension base="ls:code_usage">
			<xs:sequence>
				<xs:element name="parameterUpdate" maxOccurs="unbounded" minOccurs="0" type="ls:paramType"/>
			</xs:sequence>
			<xs:attribute name="id" type="xs:string" use="required"/>
			<xs:attribute name="autowire" type="xs:boolean" default="false"/>
		</xs:extension>
	</xs:complexContent>
</xs:complexType>

<xs:complexType name="paramDefType">
	<xs:complexContent>
		<xs:extension base="ls:paramType">
			<xs:attribute name="type" type="xs:string" use="required" />
		</xs:extension>
	</xs:complexContent>
</xs:complexType>

<xs:complexType name="paramType">
	<xs:simpleContent>
		<xs:extension base="xs:string">
			<xs:attribute name="param_id" type="xs:string" use="required"/>
		</xs:extension>
	</xs:simpleContent>
</xs:complexType>

<xs:complexType name="paramName">
	<xs:attribute name="param_id" type="xs:string" use="required"/>
</xs:complexType>

</xs:schema>